#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>
#include <graphics.h>
#define length  1000
#define width 600							//数组中0为通路，1为食物，2为毒草，3为障碍物, 
#define size sizeof(struct snake)
#define LEFT  75
#define RIGHT 77
#define UP    72
#define DOWN  80
#define ESC   27
#define ENTER 13
#define TIME  102
#define space 32
#define poison_NUM 10
#define point 10
#define r 10
#define S(x,y) map[x/(2*r)-1][y/(2*r)-1]
#define F(x) (x+1)*2*r

IMAGE img;

char map[length / (2 * r) - 1][width / (2 * r) - 1];
struct snake * head, *tail, *food, *poison, *boom;
struct snake * p1;                       //蛇移动所需指针 
struct snake * p;						//辅助指针

int snake_num = 10;                       //提供蛇的长度 
int food_num = 50;

struct snake       //定义蛇结构体
{
	int x;
	int y;
	struct snake * previous;
	struct snake * next;
};

void graph()   //地图初始化
{
	int i, j;
	initgraph(length, width);// 绘图环境初始化
	setbkcolor(YELLOW);
	cleardevice();
	setfillcolor(BLUE);
	fillrectangle(0, 0,length,3*r);
	fillrectangle(0,width-3*r, length, width);
	fillrectangle(0, 0, 3*r, width);
	fillrectangle(length-3*r, 0, length, width);
	loadimage(&img, _T("C:\\Users\\15716\\source\\repos\\Project3\\Project3\\picture\\poison.jpg"),20,20);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			map[i][j] = 3;
	for (i = 1; i < length / (2 * r) - 2; i++)
		for (j = 1; j < width / (2 * r) - 2; j++)
			map[i][j] = 0;

}

void print_snake()
{
	p1 = tail;
	for (int i = 0; i < snake_num; i++)
	{
		if (i == snake_num - 1)
			setfillcolor(RED);
		else
			setfillcolor(BLACK);
		fillcircle(p1->x, p1->y, r);
		S(p1->x, p1->y) = 3;
		p1 = p1->next;
	}
}

void createbody(int x, int y)
{
	p = (struct snake *) malloc(size);
	p->next = tail;
	tail->previous = p;
	tail = p;
	tail->x = x;
	tail->y = y;
	snake_num++;
}

void reprint_food()
{
	int i, j, x, y;
	int judge = 0;
	srand(time(0));
	while (1)
	{
		p1 = tail;
		x = (rand() % (length / 20 - 3) + 2) * 20;
		y = (rand() % (width / 20 - 3) + 2) * 20;
		if (S(x, y) == 0)
			break;
	}
	S(x, y) = 1;
	setfillcolor(BLUE);
	putimage(x-r, y-r, &img);

	
}

void print_food()
{
	int i, j;
	setfillcolor(BLUE);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			if(map[i][j] == 1)
				putimage(F(i)-r, F(j)-r, &img);
}

void definition_food()       //定义食物链表 
{
	int i, j, x, y;
	int judge;
	srand(time(0));
	for (i = 0;i < food_num;i++)
	{
		p1 = tail;
		judge = 0;
		while (1)
		{
			x = (rand() % (length/20 - 3) + 2) * 20;
			y = (rand() % (width/20 - 3) + 2) * 20;
			for (j = 0;j < snake_num;j++)
			{
				if (x != p1->x || y != p1->y)
					p1 = p1->next;
				else
				{
					judge = 1;
					break;
				}
			}
			if (judge == 0)
				break;
		}
		S(x, y) = 1;
	}
}

void definition_snake()       //定义蛇链表 
{
	int i;
	p = tail = head = (struct snake *) malloc(size);
	
	head->x = 500;
	head->y = 300;
	for (i = 1; i < snake_num; i++)
	{
		head = (struct snake *) malloc(size);
		p->next = head;
		head->previous = p;
		head->next = NULL;
		p = head;
		head->x = 500 + 2 * r * i;
		head->y = 300;
	}
	setfillcolor(BLACK);
	setlinecolor(WHITE);
	print_snake();
}

void move()                //让蛇移动 
{
	int key = RIGHT;
	int judge;
	int i, x, y;
	int end = 0;
	while (end == 0)
	{
		p = p1 = tail;
		x = p1->x;
		y = p1->y;
		for (i = 0; i < snake_num - 1; i++)
		{
			p1->x = (p1->next)->x;
			p1->y = (p1->next)->y;
			p1 = p1->next;
		}
		switch (key)
		{
		case RIGHT:
				head->x += 2*r;
				break;
		case UP:
				head->y -= 2 * r;
				break;
		case LEFT:
				head->x -= 2 * r;
				break;
		case DOWN:
				head->y += 2 * r;
				break;
		}
		switch (S(head->x, head->y))
		{
		case 1: S(head->x, head->y) = 3;
				clearrectangle(head->x-r, head->y-r, head->x+r, head->y+r);
				createbody(x, y);
				reprint_food();
				break;
		case 0: S(head->x, head->y) = 3;
				clearcircle(x, y, r);
				S(x, y) = 0;
				break;
		case 3: end = 1;
				clearcircle(x, y, r);
				S(x, y) = 0;
				break;
		}
		setfillcolor(RED);
		fillcircle(head->x, head->y, r);
		setfillcolor(BLACK);
		fillcircle((head->previous)->x, (head->previous)->y, r);
		if (_kbhit() == 1)
			if (judge = _getch() == 224)
				switch (judge = _getch())
				{
				case UP:if(key != DOWN)
							key = judge;
						break;
				case RIGHT:if(key != LEFT)
								key = judge;
						   break;
				case DOWN:if(key != UP)
							 key = judge;
						  break;
				case LEFT:if(key != RIGHT)
							 key = judge;
						  break;
				}
		Sleep(50);
	}
}

// 主函数
int main()
{
	graph();
	definition_snake();
	print_snake();		//定义并打印蛇身
	definition_food();
	print_food();
	move();

	_getch();
	closegraph();

	
}