#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>
#include <graphics.h>
#define length  1000
#define width 600							//数组中0为通路，1为食物，2为毒草，3为障碍物, 4为地雷
#define size sizeof(struct snake)
#define LEFT  75
#define RIGHT 77
#define UP    72
#define DOWN  80
#define ESC   27
#define ENTER 13
#define TIME  102
#define SPACE 32
#define poison_NUM 10
#define point 10
#define r 10
#define S(x,y) map[x/(2*r)-1][y/(2*r)-1]
#define F(x) (x+1)*2*r
#define yuan(x,y) solidcircle(x, y, r)
#define Dyuan(x,y) clearcircle(x, y, r)
#define juxing(x,y) fillrectangle(x-r,y-r,x+r,y+r);
#define Djuxing(x,y) clearrectangle(x-r,y-r,x+r,y+r);
#define L length / (2 * r) - 1
#define W width / (2 * r) - 1

char map[L][W];
struct snake * head, *tail, *food, *poison, *boom;
struct snake * p1;                       //蛇移动所需指针 
struct snake * p;						//辅助指针

int snake_num = 5;                       //提供蛇的长度 
int food_num = 1;
int poison_num = 10;
int boom_num = 2;

struct snake       //定义蛇结构体
{
	int x;
	int y;
	struct snake * previous;
	struct snake * next;
};

void graph()   //地图初始化
{
	int i, j;
	initgraph(length, width);// 绘图环境初始化
	setbkcolor(GREEN);
	cleardevice();
	setfillcolor(BLUE);
	fillrectangle(0, 0, length, 3 * r);
	fillrectangle(0, width - 3 * r, length, width);
	fillrectangle(0, 0, 3 * r, width);
	fillrectangle(length - 3 * r, 0, length, width);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			map[i][j] = 3;
	for (i = 1; i < length / (2 * r) - 2; i++)
		for (j = 1; j < width / (2 * r) - 2; j++)
			map[i][j] = 0;

}

void clear_poison()
{
	int i, j;
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			if (map[i][j] == 2)
			{
				map[i][j] = 0;
				Dyuan(F(i), F(j));
			}
}

void reprint_boom()
{
	int x, y;
	srand(time(0));
	while (1)
	{
		x = (rand() % (length / 20 - 3) + 2) * 20;
		y = (rand() % (width / 20 - 3) + 2) * 20;
		if (S(x, y) == 0)
			break;
	}
	S(x, y) = 4;
	setfillcolor(BLACK);
	yuan(x, y);


}

void print_boom()
{
	int i, j;
	setfillcolor(BLACK);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			if (map[i][j] == 4)
				yuan(F(i), F(j));
}

void definition_boom()       //定义地雷
{
	int i, x, y;
	srand(time(0));
	for (i = 0;i < boom_num;i++)
	{
		while (1)
		{
			x = (rand() % (length / 20 - 3) + 2) * 20;
			y = (rand() % (width / 20 - 3) + 2) * 20;
			if (S(x, y) == 0)
				break;
		}
		S(x, y) = 4;
	}
}

void print_poison()
{
	int i, j;
	setfillcolor(RED);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			if (map[i][j] == 2)
				yuan(F(i), F(j));
}

void reprint_poison()
{
	int x, y;
	srand(time(0));
	while (1)
	{
		x = (rand() % (length / 20 - 3) + 2) * 20;
		y = (rand() % (width / 20 - 3) + 2) * 20;
		if (S(x, y) == 0)
			break;
	}
	S(x, y) = 2;
	setfillcolor(RED);
	yuan(x, y);


}

void definition_poison()       //定义毒草
{
	int i, x, y;
	srand(time(0));
	for (i = 0;i < poison_num;i++)
	{
		while (1)
		{
			x = (rand() % (length / 20 - 3) + 2) * 20;
			y = (rand() % (width / 20 - 3) + 2) * 20;
			if (S(x, y) == 0)
				break;
		}
		S(x, y) = 2;
	}
}

void print_snake()
{
	p1 = tail;
	for (int i = 0; i < snake_num; i++)
	{
		if (i == snake_num - 1)
			setfillcolor(RED);
		else
			setfillcolor(BLACK);
		yuan(p1->x, p1->y);
		S(p1->x, p1->y) = 3;
		p1 = p1->next;
	}
}

void boombody()
{
	int i, p;
	p = snake_num;
	snake_num /= 2;

	for (i = 0; i < p - snake_num; i++)
	{
		p1 = tail;
		tail = tail->next;
		Dyuan(p1->x, p1->y);
		S(p1->x, p1->y) = 0;
		free(p1);
	}
}

void deletebody()
{
	p1 = tail;
	tail = tail->next;
	Dyuan(p1->x, p1->y);
	S(p1->x, p1->y) = 0;
	free(p1);
	snake_num--;
}

void createbody(int x, int y)
{
	p = (struct snake *) malloc(size);
	p->next = tail;
	tail->previous = p;
	tail = p;
	tail->x = x;
	tail->y = y;
	snake_num++;
}

void reprint_food()
{
	int x, y;
	srand(time(0));
	while (1)
	{
		p1 = tail;
		x = (rand() % (length / 20 - 3) + 2) * 20;
		y = (rand() % (width / 20 - 3) + 2) * 20;
		if (S(x, y) == 0)
			break;
	}
	S(x, y) = 1;
	setfillcolor(BLUE);
	yuan(x, y);
}

void print_food()
{
	int i, j;
	setfillcolor(BLUE);
	for (i = 0; i < length / (2 * r) - 1; i++)
		for (j = 0; j < width / (2 * r) - 1; j++)
			if (map[i][j] == 1)
				yuan(F(i), F(j));
}

void definition_food()       //定义食物
{
	int i, x, y;
	srand(time(0));
	for (i = 0;i < food_num;i++)
	{
		while (1)
		{
			x = (rand() % (length / 20 - 3) + 2) * 20;
			y = (rand() % (width / 20 - 3) + 2) * 20;
			if (S(x, y) == 0)
				break;
		}
		S(x, y) = 1;
	}
}

void definition_snake()       //定义蛇链表 
{
	int i;
	p = tail = head = (struct snake *) malloc(size);

	head->x = 500;
	head->y = 300;
	for (i = 1; i < snake_num; i++)
	{
		head = (struct snake *) malloc(size);
		p->next = head;
		head->previous = p;
		head->next = NULL;
		p = head;
		head->x = 500 + 2 * r * i;
		head->y = 300;
	}
	setfillcolor(BLACK);
	setlinecolor(WHITE);
	print_snake();
}

void move()                //让蛇移动 
{
	int key = RIGHT;
	int judge;
	int i, x, y;
	int end = 0;
	int count = 0;
	while (1)
	{
		count++;
		if (count == 50)
		{
			clear_poison();
			definition_poison();
			print_poison();
			count = 0;
		}
		p1 = tail;
		x = p1->x;
		y = p1->y;
		for (i = 0; i < snake_num - 1; i++)
		{
			p1->x = (p1->next)->x;
			p1->y = (p1->next)->y;
			p1 = p1->next;
		}
		switch (key)
		{
		case RIGHT:
			head->x += 2 * r;
			break;
		case UP:
			head->y -= 2 * r;
			break;
		case LEFT:
			head->x -= 2 * r;
			break;
		case DOWN:
			head->y += 2 * r;
			break;
		}
		switch (S(head->x, head->y))
		{
		case 1:
			createbody(x, y);
			reprint_food();
			break;
		case 2:

			if (snake_num == 1)
				end = 1;
			else
			{
				deletebody();
				reprint_poison();
			}break;
		case 4:
			if (snake_num == 1)
				end = 1;
			else
			{
				boombody();
				reprint_boom();
			}
		case 0: break;
		case 3: end = 1;
			break;
		}
		if (end == 1)
			break;
		S(x, y) = 0;
		S(head->x, head->y) = 3;
		Dyuan(x, y);
		setfillcolor(RED);
		yuan(head->x, head->y);
		setfillcolor(BLACK);
		yuan((head->previous)->x, (head->previous)->y);
		if (_kbhit() == 1)
			if (judge = _getch() == 224)
				switch (judge = _getch())
				{
				case UP:if (key != DOWN)
					key = judge;
					break;
				case RIGHT:if (key != LEFT)
					key = judge;
					break;
				case DOWN:if (key != UP)
					key = judge;
					break;
				case LEFT:if (key != RIGHT)
					key = judge;
					break;
				}
		Sleep(50);
	}
}

void build_barrier()
{
	int x = 500;
	int y = 300;
	int judge;
	while (1)
	{
		yuan(x, y);
		judge = _getch();
		if (judge == SPACE)
		{
			S(x, y) = 3;
			juxing(x, y);
		}
		if (judge == ESC)
		{
			S(x, y) = 0;
			Djuxing(x, y);
		}
		if (judge == ENTER)
			break;
		if (judge == 224)
		{
			Dyuan(x, y);
			switch (judge = _getch())
			{
			case UP: y -= 2 * r;
				break;
			case RIGHT: x += 2 * r;
				break;
			case DOWN: y += 2 * r;
				break;
			case LEFT: x -= 2 * r;
				break;
			}
		}
	}
	for (int i = 1; i < L-1; i++)
		for (int j = 1; j < W-1; j++)
			if (map[i][j] == 3)
				juxing(F(i), F(j));
}

void game_start()
{
	build_barrier();
	definition_snake();
	print_snake();		//定义并打印蛇身
	definition_food();
	print_food();
	definition_poison();
	print_poison();
	definition_boom();
	print_boom();
	move();
}

// 主函数
int main()
{
	graph();
	game_start();
	_getch();
	closegraph();


}