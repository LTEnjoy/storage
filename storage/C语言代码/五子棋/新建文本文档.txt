#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <windows.h>
#include <conio.h>
#include <graphics.h>
#define F(i,j)  fillcircle(20+i*35, 20+j*35, 15) 
#define D(i,j)  clearcircle(20+i*35, 20+j*35, 15) 
#define I order[i]
#define J order[j]
int X, X0;
int Y, Y0;
int x, y;
int x0, y0;
long score;
int count;
char s[10];
int sign;   //与JUDGE函数一起使用，判断棋子往后推一格是空白还是反色棋子
MOUSEMSG m;
int table[15][15] = { 0 };			//0为空，1为黑棋，-1为白棋
int order[15] = { 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14 };

int JUDGE(int x, int y, int k, int d)
{
	sign = 1;
	int i = 1, count = 0;
	switch (d)
	{
	case 1: while (y - i >= 0 && table[x][y - i] == k)
	{
		count++;
		i++;
	}
			if (table[x][y - i] == 0)
				sign = 0;
			break;
	case 2: while (x + i <= 14 && y - i >= 0 && table[x + i][y - i] == k)
	{
		count++;
		i++;
	}
			if (table[x + i][y - i] == 0)
				sign = 0;
			break;
	case 3: while (x + i <= 14 && table[x + i][y] == k)
	{
		count++;
		i++;
	}
			if (table[x + i][y] == 0)
				sign = 0;
			break;
	case 4: while (x + i <= 14 && y + i <= 14 && table[x + i][y + i] == k)
	{
		count++;
		i++;
	}
			if (table[x + i][y + i] == 0)
				sign = 0;
			break;
	case 5: while (y + i <= 14 && table[x][y + i] == k)
	{
		count++;
		i++;
	}
			if (table[x][y + i] == 0)
				sign = 0;
			break;
	case 6: while (x - i >= 0 && y + i <= 14 && table[x - i][y + i] == k)
	{
		count++;
		i++;
	}
			if (table[x - i][y + i] == 0)
				sign = 0;
			break;
	case 7: while (x - i >= 0 && table[x - i][y] == k)
	{
		count++;
		i++;
	}
			if (table[x - i][y] == 0)
				sign = 0;
			break;
	case 8: while (x - i >= 0 && y - i >= 0 && table[x - i][y - i] == k)
	{
		count++;
		i++;
	}
			if (table[x - i][y - i] == 0)
				sign = 0;
			break;
	}
	return count;
}


int client()
{
	int judge = 1, i;
	setfillcolor(BLACK);
	while (judge)
	{
		// 获取一条鼠标消息

		m = GetMouseMsg();
		switch (m.uMsg)
		{
		case WM_LBUTTONDOWN:    // 画一个圆
		{
			X = (m.x - 20) / 35;
			Y = (m.y - 20) / 35;
			X0 = (m.x - 20) % 35;
			Y0 = (m.y - 20) % 35;
			if (X0 > 18 && X < 14)
				X++;
			if (Y0 > 18 && Y < 14)
				Y++;
			if (table[X][Y] == 0)
			{
				F(X, Y);
				table[X][Y] = 1;
				Beep(800, 200);
				judge = 0;
			}
		}
		FlushMouseMsgBuffer();
		break;

		}
	}
	for (i = 1; i < 5;i++)
		if (JUDGE(X, Y, 1, i) + JUDGE(X, Y, 1, i + 4) + 1 >= 5)
		{
			outtext("你赢了！");
			return 1;
		}
	return 0;
}

int evaluate(int n, int num, int alpha, int beta)
{
	int i, j, k, temp;
	for (i = 0;i < 15;i++)
		for (j = 0;j < 15;j++)
		{
			score = 0;
			if (table[I][J] != 0 || (table[I - 1][J - 1] == 0 && table[I][J - 1] == 0 && table[I + 1][J - 1] == 0 && table[I - 1][J] == 0 && table[I + 1][J] == 0 && table[I - 1][J + 1] == 0 && table[I][J + 1] == 0 && table[I + 1][J + 1] == 0) )
				if (i == 14 && j == 14 && n == 1)
				{
					x = x0;
					y = y0;
					return beta;
				}
				else
					continue;
			if (num == 3)
			{
				x0 = I;
				y0 = J;
			}
			if (num > 1)
			{
				table[I][J] = n;
				if (n == 1)
				{
					i, j, beta = evaluate(-n, num - 1, alpha, beta);
						if (beta < alpha)
						{
							table[I][J] = 0;
							return alpha;
						}
				}
				else
					alpha = evaluate(-n, num - 1, alpha, beta);
				table[I][J] = 0;
				if (n == 1)
				{
					if (i == 14 && j == 14)
					{
						x = x0;
						y = y0;
						return beta;
					}
					else
						 continue;
				}
				if (n == -1)
					continue;
			}
				for (k = 1;k < 5;k++)		//进攻打分
				{
					switch (JUDGE(order[i], order[j], n, k))
					{
					case 0:switch (JUDGE(order[i], order[j], n, k + 4))
					{
					case 0:break;
					case 1:score += 20;break;
					case 2:if (sign == 0)
						score += 150;
						   else
						score += 70;break;
					case 3:if (sign == 0)
						score += 1500;
						   else
						score += 1100;break;
					case 4:score += 15000;break;
					}
						   break;
					case 1:if (sign == 0)
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 20;break;
						case 1:score += 150;break;
						case 2:if (sign == 0)
							score += 1500;
							   else
							score += 700;break;
						case 3:score += 15000;break;
						case 4:score += 15000;;break;
						}
						   else
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 5;break;
						case 1:score += 50;break;
						case 2:if (sign == 0)
							score += 700;
							   else
							score += 50;break;
						case 3:score += 15000;break;
						case 4:score += 15000;break;
						}
						   break;
					case 2:if (sign == 0)
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 150;break;
						case 1:score += 1500;break;
						case 2:score += 15000;break;
						case 3:score += 15000;break;
						case 4:score += 15000;;break;
						}
						   else
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 60;break;
						case 1:if (sign == 0)
							score += 700;
							   else
							score += 50;break;
						case 2:score += 15000;break;
						case 3:score += 15000;break;
						case 4:score += 15000;;break;
						}
						   break;
					case 3:if (sign == 0)
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 1500;break;
						case 1:score += 15000;break;
						case 2:score += 15000;break;
						case 3:score += 15000;break;
						case 4:score += 15000;;break;
						}
						   else
						switch (JUDGE(order[i], order[j], n, k + 4))
						{
						case 0:score += 700;break;
						case 1:score += 15000;break;
						case 2:score += 15000;break;
						case 3:score += 15000;break;
						case 4:score += 15000;;break;
						}
						   break;
					case 4:score += 15000;break;
					}
				}
				for (k = 1;k < 5;k++)			//防守打分
				{
					switch (JUDGE(order[i], order[j], -n, k))
					{
					case 0:switch (JUDGE(order[i], order[j], -n, k + 4))
					{
					case 0:break;
					case 1:score += 10;break;
					case 2:if (sign == 0)
						score += 100;
						   else
						score += 50;break;
					case 3:if (sign == 0)
						score += 1000;
						   else
						score += 100;break;
					case 4:score += 10000;break;
					}
						   break;
					case 1:if (sign == 0)
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 10;break;
						case 1:score += 100;break;
						case 2:if (sign == 0)
							score += 1000;
							   else
							score += 200;break;
						case 3:score += 10000;break;
						case 4:score += 10000;;break;
						}
						   else
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 10;break;
						case 1:score += 50;break;
						case 2:if (sign == 0)
							score += 200;
							   else
							score += 50;break;
						case 3:score += 10000;break;
						case 4:score += 10000;;break;
						}
						   break;
					case 2:if (sign == 0)
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 100;break;
						case 1:score += 1000;break;
						case 2:score += 10000;break;
						case 3:score += 10000;break;
						case 4:score += 10000;;break;
						}
						   else
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 30;break;
						case 1:if (sign == 0)
							score += 100;
							   else
							score += 50;break;
						case 2:score += 10000;break;
						case 3:score += 10000;break;
						case 4:score += 10000;;break;
						}
						   break;
					case 3:if (sign == 0)
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 1000;break;
						case 1:score += 10000;break;
						case 2:score += 10000;break;
						case 3:score += 10000;break;
						case 4:score += 10000;break;
						}
						   else
						switch (JUDGE(order[i], order[j], -n, k + 4))
						{
						case 0:score += 100;break;
						case 1:score += 10000;break;
						case 2:score += 10000;break;
						case 3:score += 10000;break;
						case 4:score += 10000;break;
						}
						   break;
					case 4:score += 10000;break;
					}
				}
				if (score > beta)
					return beta;
				if (alpha < score)
					alpha = score;
		}
		sprintf_s(s, "%ld", alpha);
		fillrectangle(0, 0, 150, 80);
		outtextxy(0, 0, s);
		return alpha;
}

int AI()
{
	int i, j, k, temp;
	setfillcolor(WHITE);
	srand(time(0));
	for (k = 0;k < 10;k++)
	{
		i = rand() % 15;
		j = rand() % 15;
		temp = order[i];
		order[i] = order[j];
		order[j] = temp;
	}
	x = y = order[0];
	evaluate(-1, 3, -1, 30000);
	F(x, y);
	table[x][y] = -1;
	for (i = 1; i < 5;i++)
		if (JUDGE(x, y, -1, i) + JUDGE(x, y, -1, i + 4) + 1 == 5)
		{
			outtext("你输了！");
			return 1;
		}
	return 0;
}

// 主函数
int main()
{
	initgraph(550, 550);
	setlinecolor(BLACK);
	settextstyle(60, 0, _T("宋体"));;
	loadimage(NULL, _T("table.jpg"));
	while (1)
	{
		if (client())
			break;
		if (AI())
			break;
	}
	getchar();
	closegraph();
}